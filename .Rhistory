install.packages("swirl")
swirl()
library(swirl)
swirl()
2+2
run
x <- inf
x <- inft
library(swirl)
swirl()
unique(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
swirl()
library(swirl)
swirl()
s()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS()
LETTERS
sample(LETTERS)
flips <- sample((0,1),100, replace = TRUE, prob =c(.3,.7))
flips <- sample((0,1),100, replace = TRUE, prob =c(.3,.7)))
flips <- sample(0,1,100, replace = TRUE, prob =c(.3,.7))
flips <- sample(0 1, 100, replace = TRUE, prob =c(.3,.7))
flips <- sample(0 1, 100, replace = TRUE, prob =c(.3,.7)
flips <-
flips
info
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(.3, .7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob =.7)
flips2 <- dbinom(1, size = 100, log = FALSE)
flips2 <- dbinom(1, size = 100, prob =.7 log = FALSE)
info
flips2 <- rbinom(n=100, size = 1, prob = .7)
flips 2
flips2
sum(flips)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, )
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date(1969-01-01)
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- POSIXlt(Sys.time())
t2 <- POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- October 17, 1986 08:24
t3 : October 17, 1986 08:24
t3 <- "October 17, 1986 08:24"
striptime(t3, "%B %d, %Y %H:%M")
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
setwd("~/Documents/ProgrammingAssignment2")
## The following functions calculate the inverse of a matrix and saves it
## to the cache such that the next time the user attempts to calculate the
## matrix inverse, the previously saved value is returned instead of
## repeating the calculation.
## This function creates a special "matrix" object, which is really a list
## containing a function to
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the value of the inverse
## 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
## create a matrix object x and some associated sub-functions/methods
## define the cache m
m <- NULL
set <- function(y) {
x <<- y ## assign the input matrix y to the variable x in the
## parent environment
m <<- NULL ## re-initialize m in the parent environment to null
}
get <- function() x ## return the matrix x
setinverse <- function(inverse) m <<- inverse ## set the cache m equal
## to the inverse of the matrix x
getinverse <- function() m ## return the cached inverse of x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The following function calculates the inverse of the special "matrix" created
## with the above function. However, it first checks to see if the inverse
## has already been caclulated. If so, it 'get's the inverse from the cache
## and skips the computation. Otherwise, it calculates the matrix inverse
## and sets the value of the inverse in the cache via the 'setinverse' function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
makeCacheMatrix
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
## The following functions calculate the inverse of a matrix and saves it
## to the cache such that the next time the user attempts to calculate the
## matrix inverse, the previously saved value is returned instead of
## repeating the calculation.
## This function creates a special "matrix" object, which is really a list
## containing a function to
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the value of the inverse
## 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
## create a matrix object x and some associated sub-functions/methods
## define the cache m
m <- NULL
set <- function(y) {
x <<- y ## assign the input matrix y to the variable x in the
## parent environment
m <<- NULL ## re-initialize m in the parent environment to null
}
get <- function() x ## return the matrix x
setinverse <- function(inverse) m <<- inverse ## set the cache m equal
## to the inverse of the matrix x
getinverse <- function() m ## return the cached inverse of x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The following function calculates the inverse of the special "matrix" created
## with the above function. However, it first checks to see if the inverse
## has already been caclulated. If so, it 'get's the inverse from the cache
## and skips the computation. Otherwise, it calculates the matrix inverse
## and sets the value of the inverse in the cache via the 'setinverse' function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
returnge(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
getamatrix
getamatrix()
amatrixget
amatrixget
amatrix$get
amatrix$()
amatrix$get()
cacheSolve(amatrix)
cacheSolve(amatrix)
amatrix$getinverse
amatrix$getinverse()
cacheSolve(amatrix)
cacheSolve(amatrix)
## The following functions calculate the inverse of a matrix and saves it
## to the cache such that the next time the user attempts to calculate the
## matrix inverse, the previously saved value is returned instead of
## repeating the calculation.
## This function creates a special "matrix" object, which is really a list
## containing a function to
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. set the value of the inverse
## 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
## create a matrix object x and some associated sub-functions/methods
## define the cache m
m <- NULL
set <- function(y) {
x <<- y ## assign the input matrix y to the variable x in the
## parent environment
m <<- NULL ## re-initialize m in the parent environment to null
}
get <- function() x ## return the matrix x
setinverse <- function(inverse) m <<- inverse ## set the cache m equal
## to the inverse of the matrix x
getinverse <- function() m ## return the cached inverse of x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The following function calculates the inverse of the special "matrix" created
## with the above function. However, it first checks to see if the inverse
## has already been caclulated. If so, it 'get's the inverse from the cache
## and skips the computation. Otherwise, it calculates the matrix inverse
## and sets the value of the inverse in the cache via the 'setinverse' function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
amatrix$get()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
source(cachematrix.R)
## The below functions calculate the inverse of a matrix and saves it to the cache,
## thus the next time the user attempts to caclulate the inverse of the matrix the saved
## value is returned. By using the cache this saves time in longer computations.
## This function creates the special matrix, containing functions to:
## set and get the value of both the matrix and its inverse.
makeCacheMatrix <- function(x = matrix()) {
## Create a Matrix
m <- NULL
## Define Cache.
set <- function(y) {
x <<- y
## Assign matrix "y" to "x".
m <<- NULL
## Set "m" back to NULL.
}
get <- function() x
## Return Matrix.
setinverse <- function(inverse) m <<- inverse
## Set "m" = to "x" inverse.
getinverse <- function() m
## Return "x" from cache.
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the matrix, that is in the function above.
## However firstly it checks if the inverse was already calculated.
## If the inverse was already calculated, it retrieves the inverse from the cache,
## thus skipping the calculation. If the inverse has not been already calculated the
## functon below takes the inverse and stores the "new" inverse in the cache.
cacheSolve <- function(x, ...) {
## Return the inverse matrix x.
m <- x$getinverse()
if(!is.null(m)) {
message("Getting Cached Data...")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
## The below functions calculate the inverse of a matrix and saves it to the cache,
## thus the next time the user attempts to caclulate the inverse of the matrix the saved
## value is returned. By using the cache this saves time in longer computations.
## This function creates the special matrix, containing functions to:
## set and get the value of both the matrix and its inverse.
makeCacheMatrix <- function(x = matrix()) {
## Create a Matrix
m <- NULL
## Define Cache.
set <- function(y) {
x <<- y
## Assign matrix "y" to "x".
m <<- NULL
## Set "m" back to NULL.
}
get <- function() x
## Return Matrix.
setinverse <- function(inverse) m <<- inverse
## Set "m" = to "x" inverse.
getinverse <- function() m
## Return "x" from cache.
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the matrix, that is in the function above.
## However firstly it checks if the inverse was already calculated.
## If the inverse was already calculated, it retrieves the inverse from the cache,
## thus skipping the calculation. If the inverse has not been already calculated the
## functon below takes the inverse and stores the "new" inverse in the cache.
cacheSolve <- function(x, ...) {
## Return the inverse matrix x.
m <- x$getinverse()
if(!is.null(m)) {
message("Getting Cached Data...")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
